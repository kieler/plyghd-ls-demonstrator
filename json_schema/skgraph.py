# generated by datamodel-codegen:
#   filename:  SKGraphSchema.json
#   timestamp: 2024-10-07T11:29:17+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class SModelElement(BaseModel):
    type: Optional[str] = None
    id: Optional[str] = None
    children: Optional[List[SModelElement]] = []
    trace: Optional[str] = None


class Size(BaseModel):
    width: Optional[float] = None
    height: Optional[float] = None


class SShapeElement(SModelElement):
    size: Optional[Size] = Field(
        default_factory=lambda: Size.parse_obj({'width': 0.0, 'height': 0.0})
    )


class JunctionPoint(BaseModel):
    x: Optional[float] = None
    y: Optional[float] = None


class KGraphData(BaseModel):
    properties: Optional[Dict[str, Any]] = {}


class KPlacementData(BaseModel):
    stub: Optional[str] = None


class SKElement(BaseModel):
    data: Optional[List[KGraphData]] = []
    properties: Optional[Dict[str, Any]] = {}
    type: Optional[str] = None


class SKGraph(SKElement, SModelElement):
    type: Optional[str] = 'graph'
    revision: Optional[float] = None


class SKNode(SKElement, SShapeElement):
    type: Optional[str] = 'node'


class SKLabel(SKElement, SModelElement):
    text: Optional[str] = None
    type: Optional[str] = 'label'


class SKEdge(SKElement, SModelElement):
    sourceId: Optional[str] = None
    targetId: Optional[str] = None
    junctionPoints: Optional[List[JunctionPoint]] = []
    type: Optional[str] = 'edge'


class SKPort(SKElement, SShapeElement):
    type: Optional[str] = 'port'


class KRendering(KGraphData):
    placementData: Optional[KPlacementData] = None
    styles: Optional[List] = []
    actions: Optional[List] = []
    type: Optional[str] = 'KRenderingImpl'
    # TODO: add this to the schema.
    id: str


class KContainerRendering(KRendering):
    children: Optional[List[KRendering]] = []
    childPlacement: Optional[Any] = None
    type: Optional[str] = 'KContainerRenderingImpl'


class KRectangle(KContainerRendering):
    type: Optional[str] = 'KRectangleImpl'


class KRoundedRectangle(KRectangle):
    cornerWidth: Optional[float] = None
    cornerHeight: Optional[float] = None
    type: Optional[str] = 'KRoundedRectangleImpl'


class KPolyline(KContainerRendering):
    type: Optional[str] = 'KPolylineImpl'
    junctionPointRendering: Optional[KRendering] = None


class KPolygon(KPolyline):
    type: Optional[str] = 'KPolygonImpl'


class KSpline(KPolyline):
    type: Optional[str] = 'KSplineImpl'


class KImage(KContainerRendering):
    bundleName: Optional[str] = None
    imagePath: Optional[str] = None
    type: Optional[str] = 'KImageImpl'


class KEllipse(KContainerRendering):
    type: Optional[str] = 'KEllipseImpl'


class KArc(KContainerRendering):
    startAngle: Optional[float] = None
    arcAngle: Optional[float] = None
    type: Optional[str] = 'KArcImpl'


class KText(KContainerRendering):
    text: Optional[str] = None
    clip: Optional[bool] = None
    type: Optional[str] = 'KTextImpl'


SModelElement.update_forward_refs()

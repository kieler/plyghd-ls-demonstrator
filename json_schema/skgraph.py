# generated by datamodel-codegen:
#   filename:  SKGraphSchema.json
#   timestamp: 2024-10-07T09:12:54+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel


class SModelElement(BaseModel):
    type: Optional[str] = None
    id: Optional[str] = None
    children: Optional[List[SModelElement]] = None
    trace: Optional[str] = None


class SShapeElement(SModelElement):
    position: Optional[Dict[str, Any]] = None
    size: Optional[Dict[str, Any]] = None
    layoutOptions: Optional[Dict[str, Any]] = None


class KGraphData(BaseModel):
    properties: Optional[Dict[str, Any]] = None


class KPlacementData(BaseModel):
    __root__: Any


class SKElement(BaseModel):
    data: Optional[List[KGraphData]] = None
    properties: Optional[Dict[str, Any]] = None
    type: Optional[str] = None


class SKNode(SKElement, SShapeElement):
    type: Optional[str] = 'node'


class SKLabel(SKElement, SModelElement):
    text: Optional[str] = None
    type: Optional[str] = 'label'


class SKEdge(SKElement, SModelElement):
    sourceId: Optional[str] = None
    targetId: Optional[str] = None
    type: Optional[str] = 'edge'


class SKPort(SKElement, SShapeElement):
    type: Optional[str] = 'port'


class KRendering(KGraphData):
    parent: Optional[KRendering] = None
    placementData: Optional[KPlacementData] = None
    styles: Optional[List] = None
    actions: Optional[List] = None
    type: Optional[str] = 'KRenderingImpl'


class KContainerRendering(KRendering):
    children: Optional[List[KRendering]] = None
    childPlacement: Optional[Any] = None
    type: Optional[str] = 'KContainerRenderingImpl'


class KRectangle(KContainerRendering):
    type: Optional[str] = 'KRectangleImpl'


class KRoundedRectangle(KRectangle):
    cornerWidth: Optional[float] = None
    cornerHeight: Optional[float] = None


class KPolyline(KContainerRendering):
    pass


class KPolygon(KPolyline):
    pass


class KSpline(KPolyline):
    pass


class KImage(KContainerRendering):
    bundleName: Optional[str] = None
    imagePath: Optional[str] = None


class KEllipse(KContainerRendering):
    pass


class KArc(KContainerRendering):
    startAngle: Optional[float] = None
    arcAngle: Optional[float] = None


class KText(KContainerRendering):
    text: Optional[str] = None
    clip: Optional[bool] = None


SModelElement.update_forward_refs()
KRendering.update_forward_refs()
